{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PotyStack","text":"<p>Um Curso Brasileiro de Full Stack para ser divertido e gostoso de aprender</p>"},{"location":"#porque-potystack","title":"Porque PotyStack?","text":"<p>PotyStack \u00e9 um nome que carrega identidade, resili\u00eancia e uma conex\u00e3o profunda com a cultura brasileira. Inspirado na palavra tupi-guarani \"poty\", que significa flor, o nome representa crescimento, aprendizado e evolu\u00e7\u00e3o \u2014 elementos essenciais para qualquer desenvolvedor full stack.</p> <p>Al\u00e9m disso, Poty faz refer\u00eancia aos Potiguaras, um povo ind\u00edgena conhecido por sua for\u00e7a, estrat\u00e9gia e adaptabilidade. Assim como um guerreiro Potiguara precisava dominar diferentes habilidades para sobreviver e prosperar, um desenvolvedor full stack deve transitar com maestria entre o back-end e o front-end, encarando desafios com intelig\u00eancia e criatividade.</p> <p>Unindo tradi\u00e7\u00e3o e tecnologia, PotyStack simboliza um desenvolvimento s\u00f3lido, resiliente e alinhado \u00e0 diversidade do Brasil.</p>"},{"location":"#sobre-o-curso","title":"Sobre o Curso","text":"<p>O PotyStack \u00e9 um curso de desenvolvimento full stack que tem como objetivo ensinar a criar aplica\u00e7\u00f5es web modernas e completas, desde o back-end at\u00e9 o front-end.</p> <p>O curso \u00e9 dividido em m\u00f3dulos que abordam diferentes tecnologias e conceitos, permitindo que voc\u00ea aprenda a criar aplica\u00e7\u00f5es completas e funcionais, al\u00e9m de entender como cada parte do sistema se conecta e interage.</p>"},{"location":"#quem-e-o-publico-alvo","title":"Quem \u00e9 o p\u00fablico-alvo?","text":"<p>O curso \u00e9 voltado para quem deseja aprender a desenvolver aplica\u00e7\u00f5es web completas, desde o back-end at\u00e9 o front-end. Se voc\u00ea \u00e9 um iniciante na \u00e1rea de desenvolvimento web ou deseja aprimorar suas habilidades, o PotyStack \u00e9 o curso ideal para voc\u00ea.</p>"},{"location":"#o-que-vamos-desenvolver","title":"O que vamos desenvolver?","text":"<p>Como as pessoas que est\u00e3o escrevendo e ministrando esse cursos s\u00e3o pessoas que est\u00e3o muito ligadas a disciplina de Gest\u00e3o de Tecnologia da Informa\u00e7\u00e3o, que basicamente inclui processos ligados ao ITIL, COBIT, PMBOK, Agile, DevOps, entre outros, vamos criar um sistema b\u00e1sico de registro de chamados de TI.</p> <p>Daqui por diante vamos chamar esse sistema de #TamoJunto. Abaixo um diagrama de caso de uso do que esse sistema deve fazer:</p> <p></p>"},{"location":"#o-que-voce-vai-encontrar-aqui-para-aprender","title":"O que voc\u00ea vai encontrar aqui para aprender?","text":"<p>Nesse cursos vamos focar nas seguintes tecnologias:</p> Tema Tecnologia Back-end Python, Poetry, FastAPI, Pydantic, Pydentic-settingsSQLAlchemy, Alembic, PostgreSQL, Celery, RabitMQ, Redis, Docker,  DockerCompose Front-end HTML, CSS, JavaScript, Angular, Bootstrap, Material Design, Node.js DevOps Git, GitHub, GitHub Actions Monitoramento Grafana, Prometheus, OpenTelemetry"},{"location":"#como-vai-funcionar-o-curso","title":"Como vai funcionar o curso?","text":"<p>O curso ser\u00e1 dividido em dois m\u00f3dulos principais:</p> <ul> <li> <p>Back-end: Em back-end vamos focar em python e um conjunto de frameworks, al\u00e9m de outras tecnologias que fazem parte desse mundo de back-end. Para isso vamos divir esse aprendizado dois subm\u00f3dulos: </p> <ul> <li>APIs S\u00edncronas: Vamos aprender a criar APIs com FastAPI, um framework moderno e r\u00e1pido para cria\u00e7\u00e3o de APIs e fazer a integra\u00e7\u00e3o com banco de dados PostgreSQL. </li> <li>APIs Ass\u00edncronas: Vamos aprender a criar tarefas ass\u00edncronas com Celery e RabbitMQ. Aqui tab\u00e9m vamos aprender a fazer a integra\u00e7\u00e3o com um modelo de intelig\u00eancia artificial.</li> </ul> </li> <li> <p>Front-end: Em front-end vamos focar em HTML, CSS e JavaScript, al\u00e9m de frameworks modernos como Angular e Bootstrap. Para isso vamos dividir esse aprendizado em dois subm\u00f3dulos:</p> <ul> <li>Web Design: Vamos aprender a criar p\u00e1ginas web responsivas e bonitas com HTML, CSS e Bootstrap.</li> <li>Web Development: Vamos aprender a criar aplica\u00e7\u00f5es web din\u00e2micas com Angular e Node.js.</li> </ul> </li> </ul>"},{"location":"tamo-junto/","title":"#TamoJunto Chamados de TI","text":"<p>O #TamoJunto \u00e9 um sistema b\u00e1sico de registro de chamados de TI. Nosso objetivo aqui n\u00e3o \u00e9 fazer o melhor sistemas de chamados de TI do mundo, mas sim aprender a criar um sistema completo, desde o back-end at\u00e9 o front-end. Portanto vai com calma sobre as cr\u00edticas ao sistema, pois o foco aqui \u00e9 o aprendizado.</p> <p>Como vimos anteriormente, na introdu\u00e7\u00e3o do curso, o #TamoJunto possu\u00ed o seguinte diagrama de caso de uso:</p> <p></p>"},{"location":"tamo-junto/#o-que-e-um-caso-de-uso","title":"O que \u00e9 um Caso de Uso?","text":"<p>Caso de uso \u00e9 um dos digramas mais importantes da UML (Unified Modeling Language). </p> <p>Um diagrama de caso de uso mostra um conjunto de casos de uso e atores (um tipo especial de classe) e seus relacionamentos. Esses diagramas s\u00e3o utilizados para para ilustrar uma vis\u00e3o est\u00e1tica do  uso de um sistema. Essa demonstra\u00e7\u00e3o est\u00e1tica \u00e9 importante porque demonstra de uma forma simples como o sistema ser\u00e1 utilizado, por quem e quais s\u00e3o as funcionalidades que ele deve ter.</p> <p>O diagrama caso de uso em s\u00ed basicamente tem dois s\u00edmbolos: </p> <ul> <li>um elipse (que \u00e9 o caso de uso)</li> <li>um ator (que \u00e9 quem vai utilizar o caso de uso)</li> </ul>"},{"location":"tamo-junto/#entendendo-o-diagrama-de-caso-de-uso-do-tamojunto","title":"Entendendo o Diagrama de Caso de Uso do #TamoJunto","text":"<p>O diagrama de caso de uso do #TamoJunto \u00e9 bem simples. Ele mostra que o sistema ter\u00e1 tr\u00eas atores: o Usu\u00e1rio, o Atendente e o Administrador.</p> <p>O Usu\u00e1rio \u00e9 quem vai abrir os chamados de TI. Ele vai informar o problema que est\u00e1 enfrentando e o sistema vai cadastrar esse chamado e informar o n\u00famero do chamado para o usu\u00e1rio. Obviamente o usu\u00e1rio tamb\u00e9m vai poder consultar os chamados que foram abertos por ele. Uma outra funcionalidade que o usu\u00e1rio vai ter \u00e9 a de poder avaliar o atendimento que ele recebeu. Al\u00e9m dessas funcionalidades relacionadas a chamados, o usu\u00e1rio tamb\u00e9m vai poder acessar uma base de conhecimento onde ele pode consultar textos que v\u00e3o ajudar a resolver problemas comuns.</p> <p>O Atendente \u00e9 quem vai resolver os chamados de TI. Ele vai poder consultar os chamados que est\u00e3o abertos e vai poder resolver esses chamados. Al\u00e9m disso, o atendente vai poder ter acesso a uma funcionalidade de que vai sugerir solu\u00e7\u00f5es para os chamados que est\u00e3o abertos. Na parte de base de conhecimento, o atendente vai poder criar novos textos que v\u00e3o ajudar a resolver problemas comuns.</p> <p>O Administrador \u00e9 quem vai gerenciar o sistema. Ele vai poder cadastrar os usu\u00e1rios, dar permiss\u00f5es para os atendentes e administradores, al\u00e9m de poder realizar qualquer opera\u00e7\u00e3o que os outros atores fazem.</p> <p>Parece simples, n\u00e3o \u00e9? Mas acredite temos muito o que aprender para fazer esse sistema funcionar. Vamos em frente!</p>"},{"location":"tamo-junto/#arquiteura-do-sistema","title":"Arquiteura do Sistema","text":"<p>O desenho a seguir mostra a arquitetura do sistema #TamoJunto:</p> <p></p> <p>Vamos descrever essa imagem acima:</p> <ul> <li> <p>Temos um polvo no canto superior esquerdo. Esse polvo esta segurando um monte de conteiner azuis. Esse \u00e9 o simbolo do DokerCompose, que \u00e9 uma forma bem simplificada de orquestrar v\u00e1rios conteineres Docker. Esse logo do DockerCompose esta limitando um quadrado que contem um monte de coisas... e cada uma dessas coisas tem algo em comum que \u00e9 um desenho de um ret\u00e2ngulo laranja com um desenhor de um processador ao centro. Esse \u00e9 uma forma simplificada de dizer que aquilo \u00e9 um conteiner. Podemos ver que existem 5 camdas de desenhos. Vamos da esquerda para a direita:</p> </li> <li> <p>Na primeira camada temos um conteiner que tem um s\u00edmbolo de um hex\u00e1gono verde com um \"N\" ao centro. Esse \u00e9 o simbolo do Nginx, que \u00e9 um web server ou um proxy reverso. N\u00e3o se preocupe se voc\u00ea n\u00e3o sabe o que \u00e9 isso, vamos aprender sobre isso mais para frente.</p> </li> <li> <p>Na segunda camada com mais 2 desenhos:</p> <ul> <li> <p>O desenho de acima est\u00e1 com o logo do Angular e um desenho abaixo de uma estrutura de arquivos. Esse \u00e9 o front-end do sistema. Apesar de containerizado, o front-end n\u00e3o \u00e9 uma aplica\u00e7\u00e3o em si, mas sim um conjunto de arquivos que v\u00e3o ser servidos pelo Nginx.</p> </li> <li> <p>O container abaixo est\u00e1 com o logo do Fast API. Esse \u00e9 o container respons\u00e1vel por servir a API do sistema. Ele vai ser respons\u00e1vel por receber as requisi\u00e7\u00f5es do front-end e fazer a comunica\u00e7\u00e3o com o banco de dados e outros servi\u00e7os.</p> </li> </ul> </li> <li> <p>A terceira camada tem apenas um container que esta com o logo do Celery e do langchain. Esse \u00e9 o container respons\u00e1vel por servir o servi\u00e7o de tarefas ass\u00edncronas do sistema e realizar tarefas de inteligencia artificial e generativa. O Celery \u00e9 um framework que permite a execu\u00e7\u00e3o de tarefas ass\u00edncronas e o Langchain \u00e9 um framework que permite a execu\u00e7\u00e3o de agentes de intelig\u00eancia artificial.</p> </li> <li> <p>A quarta camada tem mais 3 containers:</p> <ul> <li> <p>O container mais acima est\u00e1 com o logo do PostgreSQL. Esse \u00e9 o container respons\u00e1vel por servir o banco de dados do sistema.</p> </li> <li> <p>O container do meio est\u00e1 com o logo do RabbitMQ. Esse \u00e9 o container respons\u00e1vel por servir o servi\u00e7o de mensageria do sistema.</p> </li> <li> <p>O container mais abaixo est\u00e1 com o logo do Redis. Esse \u00e9 o container respons\u00e1vel por servir o servi\u00e7o de cache do sistema, entre outras coisas.</p> </li> </ul> </li> <li> <p>Na quinta e ultima camada temos mais 2 containers:</p> <ul> <li>O container mais acima est\u00e1 com o logo do Celery, mas como o nome de Flower. Esse \u00e9 o container respons\u00e1vel por servir a interface web do Celery, onde poderemos ver as tarefas que est\u00e3o sendo executadas e seus resultados.</li> <li>O container mais abaixo esta com v\u00e1rios logos de ferramentas de monitoramento:<ul> <li>Grafana: \u00e9 uma ferramenta de visualiza\u00e7\u00e3o de dados.</li> <li>Grafana Loki: \u00e9 uma ferramenta de log.</li> <li>Grafana Tempo: \u00e9 uma ferramenta de rastreamento distribu\u00eddo.</li> <li>Prometheus: \u00e9 uma ferramenta de monitoramento.</li> <li>OpenTelemetry: \u00e9 um framework de observabilidade.</li> </ul> </li> </ul> </li> </ul> <p>Como dissemos anteriormente, o #TamoJunto apesar de ser um sistema simples nos permite agregar muitos conceitos e tecnologias. Bora aprender e se divertir!</p>"},{"location":"Aulas/Back%20End/aula_01/","title":"Aula 01 - Preparando o WSL2 para o curso","text":""},{"location":"Aulas/Back%20End/aula_01/#objetivo","title":"Objetivo","text":"<p>Nessa aula vamos preparar o ambiente de desenvolvimento para o curso PotyStack. Vamos instalar o Python, o Poetry e o FastAPI, al\u00e9m de mais algumas ferramentas que ser\u00e3o \u00fateis ao longo do curso.</p>"},{"location":"Aulas/Back%20End/aula_01/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Neste curso vamos tomar como base que voc\u00ea j\u00e1 tenha conhecimentos b\u00e1sicos de programa\u00e7\u00e3o e saiba como instalar programas no seu sistema operacional. De uma forma ou de outra, vamos tentar ser o mais did\u00e1ticos poss\u00edvel, mas se voc\u00ea tiver alguma dificuldade, n\u00e3o hesite em nos chamar.</p> <p>Como base, vamos usar o ambiente windows com o wsl2, mas voc\u00ea pode usar o sistema operacional que preferir.</p> <p>Estamos usando o Windows como base somente porque a maioria das pessoas que est\u00e3o come\u00e7ando a programar no Brasil usam Windows. Se voc\u00ea usa Linux ou MacOS, fique tranquilo, pois vamos tentar ser o mais abrangente poss\u00edvel.</p>"},{"location":"Aulas/Back%20End/aula_01/#virtualizacao","title":"Virtualiza\u00e7\u00e3o","text":"<p>Antes de come\u00e7armos a instalar as ferramentas, vamos falar um pouco sobre virtualiza\u00e7\u00e3o. Esse conceito \u00e9 muito importante uma vez que neste curso vamos usar v\u00e1rias ferramentas que dependem de virtualiza\u00e7\u00e3o.</p> <p>A virtualiza\u00e7\u00e3o \u00e9 uma t\u00e9cnica que permite criar uma vers\u00e3o virtual de um dispositivo ou recurso, como um servidor, um sistema operacional, um dispositivo de armazenamento ou uma rede. A virtualiza\u00e7\u00e3o \u00e9 comumente usada para criar ambientes de teste ou desenvolvimento que n\u00e3o afetam o ambiente na qual voc\u00ea est\u00e1 trabalhando.</p> <p>Basicamente, o processo de virturaliza\u00e7\u00e3o cria uma camada de abstra\u00e7\u00e3o entre o hardware e o sistema operacional, permitindo que voc\u00ea execute v\u00e1rios sistemas operacionais em um \u00fanico hardware.</p> <p>Essa tecnologia \u00e9 possivel gra\u00e7as a um software chamado de hipervisor, que, atrav\u00e9s de uma camada de abstra\u00e7\u00e3o, composta por uma s\u00e9rie de APIs, permite que sistemas operacionais sejam meio que \"enganados\" a acreditar que est\u00e3o rodando em um hardware real.</p> <pre><code>graph TD\n    A[Hardware] --&gt; B(Hypervisor)\n    B --&gt; C(Sistema Operacional 1)\n    B --&gt; D(Sistema Operacional 2)\n    B --&gt; E(Sistema Operacional 3)</code></pre> <p>Para saber mais sobre virtualiza\u00e7\u00e3o esse artigo da Red Hat traz uma explica\u00e7\u00e3o mais detalhada. Outro artigo interessante \u00e9 esse aqui da WikiPedia.</p>"},{"location":"Aulas/Back%20End/aula_01/#instalando-o-wsl2","title":"Instalando o WSL2","text":"<p>Para instalar o WSL2, siga o tutorial oficial da Microsoft: Instalar o WSL 2</p> <p>Aqui vamos fazer um resumo do que voc\u00ea precisa fazer para instalar o WSL2 e algumas dicas que podem te ajudar.</p> <p>A distribui\u00e7\u00e3o que vamos usar \u00e9 o Ubuntu 22.04 LTS, mas voc\u00ea pode usar a distribui\u00e7\u00e3o que preferir.</p> <p>Para instalar o Ubuntu 22.04 LTS, precisaremos realizar diversos passos. Vamos l\u00e1!</p>"},{"location":"Aulas/Back%20End/aula_01/#validando-se-o-hyper-v-esta-habilitado","title":"Validando se o Hyper-V est\u00e1 habilitado","text":"<p>Para validar se o Hyper-V est\u00e1 habilitado, abra o terminal. Para isso, pressione <code>Win + R</code> e digite <code>cmd</code> e pressione <code>Enter</code>.</p> <p>No terminal, digite o seguinte comando:</p> <p>Validando se o Hyper-V est\u00e1 habilitado<pre><code>systeminfo | find \"Hyper-V\"\n</code></pre> O comando acima vai retornar se o Hyper-V est\u00e1 habilitado ou n\u00e3o. Se o Hyper-V estiver habilitado, voc\u00ea ver\u00e1 a seguinte mensagem:</p> <pre><code>Hyper-V Requirements:      VM Monitor Mode Extensions: Yes\n                           Virtualization Enabled In Firmware: Yes\n                           Second Level Address Translation: Yes\n                           Data Execution Prevention Available: Yes\n</code></pre> Observa\u00e7\u00e3o <p>Esses dados ir\u00e3o variar de acordo com a sua m\u00e1quina e a linguagem do seu sistema operacional.</p> Habilitando o Hyper-V (caso n\u00e3o esteja habilitado) <p>Esse passo \u00e9 mais complicado e pode variar de acordo com a sua m\u00e1quina. O que vai determinar como voc\u00ea vai habilitar o Hyper-V \u00e9 o fabricante do processador da sua m\u00e1quina.</p>"},{"location":"Aulas/Back%20End/aula_01/#habilitando-o-hyper-v-em-processadores-intel","title":"Habilitando o Hyper-V em processadores Intel","text":"<ol> <li>Reinicie o computador e acesse a BIOS (para isso pressione uma dessas teclas: <code>F2</code>, <code>F10</code>, <code>DEL</code> ou <code>ESC</code>, isso pode variar de acordo com a marca de sua m\u00e1quina).</li> <li>Procure por pela op\u00e7\u00e3o <code>Advanced</code> ou <code>CPU Configuration</code>.</li> <li>Procure por <code>Intel Virtualization Technology</code>, <code>Intel VT-x</code> ou <code>Intel VT-d</code> e habilite essa op\u00e7\u00e3o.</li> <li>Salve as configura\u00e7\u00f5es e reinicie o computador.</li> <li>Ap\u00f3s reiniciar, abra o terminal e digite o comando <code>systeminfo | find \"Hyper-V\"</code> para verificar se o Hyper-V foi habilitado.</li> </ol>"},{"location":"Aulas/Back%20End/aula_01/#habilitando-o-hyper-v-em-processadores-amd","title":"Habilitando o Hyper-V em processadores AMD","text":"<ol> <li>Reinicie o computador e acesse a BIOS (para isso pressione uma dessas teclas: <code>F2</code>, <code>F10</code>, <code>DEL</code> ou <code>ESC</code>, isso pode variar de acordo com a marca de sua m\u00e1quina).</li> <li>Procure por pela op\u00e7\u00e3o <code>Advanced</code> ou <code>CPU Configuration</code>.</li> <li>Procure por <code>SVM Mode</code>, <code>AMD-V</code> ou <code>Virtualization Technology</code> e habilite essa op\u00e7\u00e3o.</li> <li>Salve as configura\u00e7\u00f5es e reinicie o computador.</li> <li>Ap\u00f3s reiniciar, abra o terminal e digite o comando <code>systeminfo | find \"Hyper-V\"</code> para verificar se o Hyper-V foi habilitado.</li> </ol> <p>Observa\u00e7\u00e3o</p> <p>A habilita\u00e7\u00e3o do Hyper-V em maquinas que usam o processador AMD podem gerar algum conflito, principalmente se a solu\u00e7\u00e3o de virtualiza\u00e7\u00e3o do seu processador for a <code>AMD-V</code>. Nesse caso, voc\u00ea pode desabilitar a virtualiza\u00e7\u00e3o atrav\u00e9s de software. Para isso voc\u00ea precisa abrir o prompt de comando como administrador e digitar o seguinte comando: <code>bcdedit /set hypervisorlaunchtype off</code>. Ap\u00f3s isso, reinicie o computador.</p>"},{"location":"Aulas/Back%20End/aula_01/#validando-requisitos-do-seu-sistema-operacional","title":"Validando requisitos do seu sistema operacional","text":"<p>Para o uso do WSL2, \u00e9 necess\u00e1rio que o seu sistema operacional seja compat\u00edvel. Esses passos s\u00e3o para usu\u00e1rios do Windows 10, caso voc\u00ea esteja usando o Windows 11, pule para o pr\u00f3ximo passo.</p> <ol> <li>Abra o terminal e digite o seguinte comando:</li> </ol> Verificando a vers\u00e3o do Windows<pre><code>winver\n</code></pre> <ol> <li>O comando acima vai abrir uma janela com a vers\u00e3o do Windows que voc\u00ea est\u00e1 usando. Se voc\u00ea estiver usando o Windows 10, verifique se a vers\u00e3o \u00e9 a 1903 (build 18362) ou superior. Caso voc\u00ea esteja usando uma vers\u00e3o inferior, voc\u00ea pode seguir os passos de habilita\u00e7\u00e3o do WSL2 seguindo o tutorial oficial da Microsoft: Instalar o WSL</li> </ol>"},{"location":"Aulas/Back%20End/aula_01/#habilitando-o-wsl2","title":"Habilitando o WSL2","text":"<p>Ufa! Agora que voc\u00ea j\u00e1 validou se o Hyper-V est\u00e1 habilitado e se o seu sistema operacional \u00e9 compat\u00edvel, vamos habilitar o WSL2.</p> <p>Para habilitar o WSL2, vamos usar um outro tipo de terminal do windows, o PowerShell. Para evitar problemas de permiss\u00e3o, abra o PowerShell como administrador. Abra o seu menu iniciar e digite <code>PowerShell</code>, clique com o bot\u00e3o direito do mouse sobre o \u00edcone do PowerShell e clique em <code>Executar como administrador</code>.</p> <p>No PowerShell, digite o seguinte comando:</p> Habilitando o WSL2<pre><code>wsl --install\n</code></pre> <p>Esse processo pode demorar um pouco, ent\u00e3o tenha paci\u00eancia. O que est\u00e1 acontecendo \u00e9 que o Windows est\u00e1 baixando e instalando o WSL2. Durante esse processo algumas janelas de confirma\u00e7\u00e3o v\u00e3o aparecer, clique em <code>Sim</code> ou <code>Yes</code> para confirmar.</p> <p>Ao final do processo, ser\u00e1 exibira uma mensagem pedindo para reiniciar o computador. </p> <p>Para reiniciar o seu computador, voc\u00ea pode usar o <code>Menu Iniciar</code> e clicar em <code>Reiniciar</code>, ou usar um jeito mais dev para reiniciar o computador, que \u00e9 digitar o seguinte comando no PowerShell:</p> Reiniciando o computador<pre><code>Restart-Computer\n</code></pre> <p>Esse processo de reinicializa\u00e7\u00e3o pode demorar um pouco, uma vez que o Windows est\u00e1 configurando o WSL2.</p> <p>Esse procedimento que fizemos at\u00e9 agora de habilitar o WSL2 j\u00e1 realiza a instala\u00e7\u00e3o de uma distribui\u00e7\u00e3o do Linux.</p>"},{"location":"Aulas/Back%20End/aula_01/#instalando-o-ubuntu-2204-lts","title":"Instalando o Ubuntu 22.04 LTS","text":"<p>Esse passo \u00e9 bem simples. Abra o <code>Menu Iniciar</code> e digite <code>Ubuntu</code>. Clique no \u00edcone do Ubuntu e aguarde a instala\u00e7\u00e3o.</p> <p>Durante a instala\u00e7\u00e3o, voc\u00ea ser\u00e1 solicitado a criar um usu\u00e1rio e uma senha. Essas informa\u00e7\u00f5es s\u00e3o importantes, ent\u00e3o guarde-as em um lugar seguro.</p> Passo importante <p>Recomenda-se que antes de utilizar o wsl2 que voc\u00ea realize esse passo para que sua m\u00e1quina tenha a configura\u00e7\u00e3o correta do WSL2, executando o seguinte comando no <code>PowerShell</code>:</p> Fixando a vers\u00e3o do WSL2<pre><code>wsl --set-default-version 2\n</code></pre> Dica <p>Outra forma de instalar o Ubuntu ou outra distribui\u00e7\u00e3o do Linux \u00e9 atrav\u00e9s dos seguintes comandos no PowerShell:</p> <p>Listando as vers\u00f5es dispon\u00edveis<pre><code>wsl --list --online\n</code></pre> Neste comando voc\u00ea receber\u00e1 como retorno uma lista de distribui\u00e7\u00f5es dispon\u00edveis para instala\u00e7\u00e3o. </p> <p>Escolha a distribui\u00e7\u00e3o que voc\u00ea deseja instalar (no nosso caso a Ubuntu 22.04) e execute o seguinte comando: Instalando o Ubuntu 22.04 LTS<pre><code>wsl --install -d &lt;&lt;nome_da_distribui\u00e7\u00e3o&gt;&gt;\n</code></pre></p>"},{"location":"Aulas/Back%20End/aula_01/#acessando-o-ubuntu-e-atualizando-o-sistema","title":"Acessando o Ubuntu e Atualizando o Sistema","text":"<p>Para acessar o Ubuntu, abra o <code>Menu Iniciar</code> e digite <code>Ubuntu</code>. Clique no \u00edcone do Ubuntu e aguarde a inicializa\u00e7\u00e3o.</p> <p>Ao acessar o Ubuntu, voc\u00ea vai ver uma tela de boas-vindas. Nessa tela, voc\u00ea pode escolher o seu nome de usu\u00e1rio e a sua senha (Caso n\u00e3o tenha feito anteriormente). Depois de fazer isso, voc\u00ea vai ver o terminal do Ubuntu.</p> <p>A instala\u00e7\u00e3o do Ubuntu para o WSL2 \u00e9 bem simples, ent\u00e3o voc\u00ea n\u00e3o vai precisar de muitas configura\u00e7\u00f5es. Vale lembrar que o Ubuntu que voc\u00ea instalou \u00e9 uma vers\u00e3o do Ubuntu para o WSL2, ent\u00e3o ele n\u00e3o tem interface gr\u00e1fica, apenas o terminal.</p> <p>Vamos come\u00e7ar realizando a atuali\u00e7\u00e3o o sistema, para isso digite o seguinte comando:</p> Atualizando a lista de pacotes<pre><code>sudo apt update # (1)!\n</code></pre> <ol> <li> entenda o comando:<ul> <li><code>sudo</code>: \u00e9 um comando que permite que voc\u00ea execute comandos como superusu\u00e1rio, devido a isso, voc\u00ea precisa digitar a senha do usu\u00e1rio que voc\u00ea criou durante a instala\u00e7\u00e3o do Ubuntu. Ah... no Linux, diferente de outros sistemas, o terminal n\u00e3o mostra os caracteres da senha, ent\u00e3o digite a senha e pressione <code>Enter</code>;</li> <li><code>apt</code>: \u00e9 o gerenciador de pacotes do Ubuntu;</li> <li><code>update</code>: \u00e9 o comando que atualiza a lista de pacotes dispon\u00edveis.</li> </ul> </li> </ol> <p>Depois de atualizar a lista de pacotes, vamos atualizar os pacotes do sistema. Para isso, digite o seguinte comando:</p> Atualizando os pacotes do sistema<pre><code>sudo apt upgrade -y # (1)!\n</code></pre> <ol> <li> entenda o comando:<ul> <li><code>sudo</code>: \u00e9 um comando que permite que voc\u00ea execute comandos como superusu\u00e1rio.</li> <li><code>apt</code>: \u00e9 o gerenciador de pacotes do Ubuntu;</li> <li><code>upgrade</code>: \u00e9 o comando que atualiza os pacotes do sistema;</li> <li><code>-y</code>: \u00e9 uma op\u00e7\u00e3o que faz com que o sistema n\u00e3o pe\u00e7a confirma\u00e7\u00e3o para atualizar os pacotes.</li> </ul> </li> </ol>"},{"location":"Aulas/Back%20End/aula_01/#instalando-algumas-dependencias","title":"Instalando algumas depend\u00eancias","text":"<p>Como falamos anteriormente a instala\u00e7\u00e3o do Ubuntu para o WSL2 \u00e9 bem simples, mas para que possamos instalar o Python e outras ferramentas, precisamos instalar algumas depend\u00eancias. Para isso, digite o seguinte comando:</p> Instalando depend\u00eancias<pre><code>sudo apt install -y build-essential libssl-dev zlib1g-dev \\\n                    libsqlite3-dev libreadline-dev \\\n                    lzma liblzma-dev libbz2-dev \\\n                    tk libtk tk-dev libffi-dev # (1)!\n</code></pre> <ol> <li> entenda o comando:<ul> <li><code>sudo</code>: \u00e9 um comando que permite que voc\u00ea execute comandos como superusu\u00e1rio.</li> <li><code>apt</code>: \u00e9 o gerenciador de pacotes do Ubuntu;</li> <li><code>install</code>: \u00e9 o comando que instala pacotes no Ubuntu;</li> <li><code>-y</code>: \u00e9 uma op\u00e7\u00e3o que faz com que o sistema n\u00e3o pe\u00e7a confirma\u00e7\u00e3o para instalar os pacotes;</li> <li><code>build-essential</code>: \u00e9 um pacote que cont\u00e9m v\u00e1rias ferramentas necess\u00e1rias para compilar programas;</li> <li><code>libssl-dev</code>: \u00e9 o pacote que cont\u00e9m as bibliotecas de desenvolvimento do OpenSSL;</li> <li><code>zlib1g-dev</code>: \u00e9 o pacote que cont\u00e9m as bibliotecas de desenvolvimento do zlib;</li> <li><code>liblzma-dev</code>: \u00e9 o pacote que cont\u00e9m as bibliotecas de desenvolvimento do LZMA;</li> <li><code>libsqlite3-dev</code>: \u00e9 o pacote que cont\u00e9m as bibliotecas de desenvolvimento do SQLite3;</li> <li><code>libreadline-dev</code>: \u00e9 o pacote que cont\u00e9m as bibliotecas de desenvolvimento do Readline;</li> <li><code>lzma</code>: \u00e9 o pacote que cont\u00e9m o LZMA;</li> <li><code>libbz2-dev</code>: \u00e9 o pacote que cont\u00e9m as bibliotecas de desenvolvimento do BZ2;</li> <li><code>tk</code>: \u00e9 o pacote que cont\u00e9m o TK;</li> <li><code>libtk</code>: \u00e9 o pacote que cont\u00e9m as bibliotecas do TK;</li> <li><code>tk-dev</code>: \u00e9 o pacote que cont\u00e9m as bibliotecas de desenvolvimento do TK;</li> <li><code>libffi-dev</code>: \u00e9 o pacote que cont\u00e9m as bibliotecas de desenvolvimento do FFI.</li> </ul> </li> </ol>"},{"location":"Aulas/Back%20End/aula_01/#instalando-o-pyenv","title":"Instalando o Pyenv","text":"<p>O Linux j\u00e1 vem com o Python instalado, uma vez que muitas ferramentas do sistema dependem dele. Para verificar se o Python est\u00e1 instalado, abra o terminal e digite:</p> Verificando a vers\u00e3o do Python<pre><code>python3 --version # (1)!\n</code></pre> <ol> <li> aqui voc\u00ea vai ver a vers\u00e3o do Python que est\u00e1 instalada no seu sistema, mais ou menos com a seguintes mensagem: <code>Python 3.12.3</code>.</li> </ol> Um pequeno detalhe que ajuda muito <p>No Linux, devido a compatibilidade com ferramentas do sistema, o Python \u00e9 chamado de <code>python3</code>. Isso \u00e9 uma forma de garantir que as ferramentas do sistema n\u00e3o sejam afetadas por uma vers\u00e3o mais nova do Python.</p> <p>mas por quest\u00f5es de praticidade, vamos criar um alias para o Python. Para isso, abra o terminal e digite:</p> <p>Criando um alias para o Python<pre><code>echo \"alias python=python3\" &gt;&gt; ~/.bashrc\n</code></pre> Feito isso, para que a configura\u00e7\u00e3o tenha efeito, voc\u00ea precisa reiniciar o terminal. Para isso, digite:</p> <p>Recarregando o ~/.bashrc<pre><code>source ~/.bashrc\n</code></pre> Agora voc\u00ea pode usar o comando <code>python</code> para chamar o Python.</p> <p>Perceba que \u00e9 uma vers\u00e3o mais antiga que a vers\u00e3o mais nova do python. Isso acontece porque o Linux precisa de uma vers\u00e3o mais antiga para compatabilidade com ferramentas do sistema.</p> <p>Para n\u00f3s isso pode ser um problema, uma vez que instalar uma vers\u00e3o mais nova do python sobre a vers\u00e3o que o sistema operacional precisa pode causar alguns problemas.</p> <p>Para resolver isso, vamos instalar o Python usando o <code>pyenv</code>.</p>"},{"location":"Aulas/Back%20End/aula_01/#instalando-o-pyenv-para-gerenciar-as-versoes-do-python","title":"Instalando o Pyenv para gerenciar as vers\u00f5es do Python","text":"<p>O <code>pyenv</code> \u00e9 uma ferramentjson que permite instalar e gerenciar v\u00e1rias vers\u00f5es do Python no mesmo sistema. Para instalar o <code>pyenv</code>, abra o terminal e digite:</p> Instalando o Pyenv<pre><code>curl -fsSL https://pyenv.run | bash\n</code></pre> <p>Esse comando deve apresentar o seguinte resultado:</p> <pre><code>Cloning into '/home/&lt;&lt;nome_usuario&gt;&gt;/.pyenv'...\nremote: Enumerating objects: 1337, done.\nremote: Counting objects: 100% (1337/1337), done.\nremote: Compressing objects: 100% (718/718), done.\nremote: Total 1337 (delta 798), reused 779 (delta 486), pack-reused 0 (from 0)\nReceiving objects: 100% (1337/1337), 1.13 MiB | 7.76 MiB/s, done.\nResolving deltas: 100% (798/798), done.\nCloning into '/home/&lt;&lt;nome_usuario&gt;&gt;/.pyenv/plugins/pyenv-doctor'...\nremote: Enumerating objects: 11, done.\nremote: Counting objects: 100% (11/11), done.\nremote: Compressing objects: 100% (9/9), done.\nremote: Total 11 (delta 1), reused 5 (delta 0), pack-reused 0 (from 0)\nReceiving objects: 100% (11/11), 38.72 KiB | 360.00 KiB/s, done.\nResolving deltas: 100% (1/1), done.\nCloning into '/home/&lt;&lt;nome_usuario&gt;&gt;/.pyenv/plugins/pyenv-update'...\nremote: Enumerating objects: 10, done.\nremote: Counting objects: 100% (10/10), done.\nremote: Compressing objects: 100% (6/6), done.\nremote: Total 10 (delta 1), reused 5 (delta 0), pack-reused 0 (from 0)\nReceiving objects: 100% (10/10), done.\nResolving deltas: 100% (1/1), done.\nCloning into '/home/&lt;&lt;nome_usuario&gt;&gt;/.pyenv/plugins/pyenv-virtualenv'...\nremote: Enumerating objects: 64, done.\nremote: Counting objects: 100% (64/64), done.\nremote: Compressing objects: 100% (57/57), done.\nremote: Total 64 (delta 10), reused 22 (delta 0), pack-reused 0 (from 0)\nReceiving objects: 100% (64/64), 43.08 KiB | 3.31 MiB/s, done.\nResolving deltas: 100% (10/10), done.\n\nWARNING: seems you still have not added 'pyenv' to the load path.\n\n# Load pyenv automatically by appending\n# the following to\n# ~/.bash_profile if it exists, otherwise ~/.profile (for login shells)\n# and ~/.bashrc (for interactive shells) :\n\nexport PYENV_ROOT=\"$HOME/.pyenv\"\n[[ -d $PYENV_ROOT/bin ]] &amp;&amp; export PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init - bash)\"\n\n# Restart your shell for the changes to take effect.\n\n# Load pyenv-virtualenv automatically by adding\n# the following to ~/.bashrc:\n\neval \"$(pyenv virtualenv-init -)\"\n</code></pre> <p>Vamos dar uma analisada no que aconteceu:</p> <ol> <li>O <code>pyenv</code> foi clonado para a pasta <code>~/.pyenv</code>;</li> <li>Foram clonados alguns plugins do <code>pyenv</code> para a pasta <code>~/.pyenv/plugins</code>;</li> <li>Foi apresentada uma mensagem de aviso informando que voc\u00ea precisa adicionar o <code>pyenv</code> ao seu <code>~/.bash_profile</code> ou <code>~/.profile</code> (para shells de login) e <code>~/.bashrc</code> (para shells interativos);</li> <li>Foi apresentada uma mensagem de aviso informando que voc\u00ea precisa adicionar o <code>pyenv-virtualenv</code> ao seu <code>~/.bashrc</code>.</li> </ol> <p>No nosso caso, vamos adicionar o <code>pyenv</code> ao nosso <code>~/.bashrc</code> e o <code>pyenv-virtualenv</code> ao nosso <code>~/.bashrc</code>.</p> <p>Para isso, no terminal do Linux, digite:</p> Adicionando o pyenv ao ~/.bashrc<pre><code>nano ~/.bashrc\n</code></pre> <p>Isso vai abrir o editor de texto <code>nano</code> com o conte\u00fado do seu <code>~/.bashrc</code>. No final do arquivo, adicione as seguintes linhas:</p> <pre><code>export PYENV_ROOT=\"$HOME/.pyenv\"\n[[ -d $PYENV_ROOT/bin ]] &amp;&amp; export PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init - bash)\"\n</code></pre> <p>Depois de adicionar essas linhas, pressione <code>Ctrl + O</code> para salvar o arquivo e <code>Ctrl + X</code> para sair do editor.</p> <p>Feito isso, para que a configura\u00e7\u00e3o tenha efeito, voc\u00ea precisa reiniciar o terminal. Para isso, digite:</p> Recarregando o ~/.bashrc<pre><code>source ~/.bashrc\n</code></pre> <p>Um bom artigo que explica melhor o que \u00e9 o pyenv e como ele funciona \u00e9 foi feito pelo Real Python.</p>"},{"location":"Aulas/Back%20End/aula_01/#configurando-o-git","title":"Configurando o Git","text":"<p>o <code>Git</code> \u00e9 uma ferramenta de controle de vers\u00e3o que permite que voc\u00ea controle as vers\u00f5es dos seus arquivos. O <code>Git</code> \u00e9 uma ferramenta muito importante para quem trabalha com desenvolvimento de software, uma vez que ele permite que voc\u00ea mantenha um hist\u00f3rico de todas as altera\u00e7\u00f5es que voc\u00ea fez em um arquivo.</p> <p>Todo linux j\u00e1 vem com o <code>Git</code> instalado, agora o que precisamos fazer \u00e9 configura-lo. Para isso, abra o terminal e digite:</p> Configurando o Git<pre><code>git config --global user.name \"Seu Nome\" # (1)!\ngit config --global user.email \"seu@email.com\" # (2)!\ngit config --global init.defaultBranch main # (3)!\n</code></pre> <ol> <li> Entendendo o comando:<ul> <li><code>git</code>: \u00e9 o comando do <code>Git</code>;</li> <li><code>config</code>: \u00e9 o comando que permite que voc\u00ea configure o <code>Git</code>;</li> <li><code>--global</code>: \u00e9 a op\u00e7\u00e3o que faz com que a configura\u00e7\u00e3o seja global, ou seja, ela vale para todos os reposit\u00f3rios que voc\u00ea criar;</li> <li><code>user.name</code>: \u00e9 a chave que define o nome do usu\u00e1rio;</li> <li><code>\"Seu Nome\"</code>: \u00e9 o valor que voc\u00ea vai atribuir a chave <code>user.name</code></li> </ul> </li> <li> Entendendo o comando:<ul> <li><code>user.email</code>: \u00e9 a chave que define o email do usu\u00e1rio;</li> <li><code>\"seu@email.com\"</code>: \u00e9 o valor que voc\u00ea vai atribuir a chave `user.email</li> </ul> </li> <li> Entendendo o comando:<ul> <li><code>init.defaultBranch</code>: \u00e9 a chave que define a branch padr\u00e3o do <code>Git</code>;</li> <li><code>main</code>: \u00e9 o valor que voc\u00ea vai atribuir a chave <code>init.defaultBranch</code>. Isso \u00e9 importante porque o <code>Git</code> mudou a branch padr\u00e3o de <code>master</code> para <code>main</code>.</li> </ul> </li> </ol>"},{"location":"Aulas/Back%20End/aula_01/#fazendo-com-que-seu-git-converse-com-um-repositorio-do-github","title":"Fazendo com que seu <code>Git</code> converse com um repositorio do GitHub.","text":"<p>Ter o seu c\u00f3digo apenas em sua m\u00e1quina \u00e9 bom, mas \u00e9 melhor ainda quando voc\u00ea pode compartilhar seu c\u00f3digo com outras pessoas. Para isso vamos precisar de um repositorio remoto. E o GitHub \u00e9 um dos lugares mais populares para se fazer isso.</p> <p>Caso voc\u00ea n\u00e3o tenha uma conta no git hub</p> <p>Vamos precisar que voc\u00ea tenha uma conta no GitHub. Se voc\u00ea n\u00e3o tem, crie uma conta no GitHub e crie uma conta.</p> <p>Para fazer com que o seu <code>Git</code> converse com o GitHub, voc\u00ea vai precisar de um token de acesso. Para isso, siga os passos abaixo:</p> <ol> <li>Acesse o GitHub e fa\u00e7a login na sua conta;</li> <li>Clique na sua foto de perfil no canto superior direito e v\u00e1 em <code>Settings</code>;</li> <li>No menu lateral, clique em <code>Developer settings</code>;</li> <li>No menu lateral, clique em <code>Personal access tokens</code> e em seguida clique em <code>Tokens(Classic)</code>;</li> <li>Clique em <code>Generate new token</code>;</li> <li>D\u00ea um nome para o seu token e selecione as permiss\u00f5es que voc\u00ea deseja dar para esse token. No nosso caso, vamos selecionar as permiss\u00f5es <code>repo</code> e <code>workflow</code>;</li> <li>Clique em <code>Generate token</code> e copie o token gerado; </li> <li>Agora vamos configurar o <code>Git</code> para usar esse token. Para isso, abra o terminal e digite:     Configurando o Git para usar o token<pre><code>git config --global credential.helper cache # (1)!\n</code></pre><ol> <li> Entendendo o comando:<ul> <li><code>credential.helper</code>: \u00e9 a chave que define o helper de credenciais do <code>Git</code>;</li> <li><code>cache</code>: \u00e9 o valor que voc\u00ea vai atribuir a chave <code>credential.helper</code>. Esse helper vai armazenar as credenciais em cache;</li> </ul> </li> </ol> </li> </ol> <p> Aten\u00e7\u00e3o </p> <p>Ess token gerado nesses passos \u00e9 o que permite que uma maquina se conect em seu github, portanto NUNCA, NUNCA compartilhe esse token com qualquer pessoa. Caso por um descuido voc\u00ea compartilhe esse token, v\u00e1 at\u00e9 o github e delete esse token.</p>"},{"location":"Aulas/Back%20End/aula_01/#testando-a-conexao","title":"Testando a conex\u00e3o","text":"<p>Vamos fazer um simples teste para ver se a conex\u00e3o com o GitHub est\u00e1 funcionando. Para isso, vamos clonar um reposit\u00f3rio de teste. Para isso, abra o terminal e digite:</p> Clonando um reposit\u00f3rio de teste<pre><code>git clone https://github.com/code-umbu/PotyStack.git # (1)!\n</code></pre> <ol> <li> Entendendo o comando:<ul> <li><code>git</code>: \u00e9 o comando do <code>Git</code>;</li> <li><code>clone</code>: \u00e9 o comando que permite que voc\u00ea clone um reposit\u00f3rio;</li> <li><code>https://github.com/code-umbu/PotyStack.git</code>: \u00e9 o endere\u00e7o do reposit\u00f3rio que voc\u00ea quer clonar.</li> </ul> </li> </ol> <p>Se tudo estiver funcionando corretamente, voc\u00ea deve ver uma mensagem parecida com essa:</p> <pre><code>Cloning into 'PotyStack'...\nremote: Enumerating objects: 3, done.\nremote: Counting objects: 100% (3/3), done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nReceiving objects: 100% (3/3), done.\n</code></pre> <p>Provavelmente voc\u00ea vai ver uma pasta chamada <code>PotyStack</code> na pasta onde voc\u00ea est\u00e1 no terminal. Isso significa que o <code>Git</code> est\u00e1 funcionando corretamente e voc\u00ea est\u00e1 pronto para come\u00e7ar a trabalhar com o GitHub.</p>"},{"location":"Aulas/Back%20End/aula_02/","title":"Aula 02 - Preparando o ambiente de desenvolvimento","text":"<p>Agora que temos um ambiente WSL configurado, vamos come\u00e7ar a preparar o ambiente de desenvolvimento.</p> <p>Para isso vamos instalar uma serie de ferramentas que v\u00e3o nos ajudar a desenvolver nosso projeto.</p>"},{"location":"Aulas/Back%20End/aula_02/#instalando-ferramentas-do-python","title":"Instalando ferramentas do Python","text":""},{"location":"Aulas/Back%20End/aula_02/#instalando-o-python-3134","title":"Instalando o Python 3.13.4","text":""},{"location":"Aulas/Back%20End/aula_02/#conhecendo-o-pyenv-e-instalando-o-python-3131","title":"Conhecendo o <code>pyenv</code> e instalando o Python 3.13.1","text":"<p>O <code>pyenv</code> \u00e9 uma ferramenta que permite instalar e gerenciar diferentes vers\u00f5es do Python em um mesmo ambiente.</p> <p>Vamos dar uma olhada nas op\u00e7\u00f5es dispon\u00edveis:</p> <pre><code>pyenv install --list # (1)!\n</code></pre> <ol> <li> Entendendo o comando:<ul> <li><code>pyenv</code>: Comando para gerenciar vers\u00f5es do Python.</li> <li><code>install</code>: Comando para instalar uma vers\u00e3o do Python.</li> <li><code>--list</code>: flag para listar todas as vers\u00f5es dispon\u00edveis para instala\u00e7\u00e3o.</li> </ul> </li> </ol> <p>O resultado ser\u00e1 uma lista de vers\u00f5es dispon\u00edveis para instala\u00e7\u00e3o. Como voc\u00ea pode ver \u00e9 uma lista bem grande. Mas como podemos procurar por uma vers\u00e3o espec\u00edfica?</p> <pre><code>pyenv install --list | grep 3.13.1 # (1)! \n\n# 3.13.1\n# 3.13.1t\n</code></pre> <ol> <li> Entendendo o comando:<ul> <li><code>pyenv install --list</code>: Lista todas as vers\u00f5es dispon\u00edveis para instala\u00e7\u00e3o.</li> <li><code>|</code>: Pipe, redireciona a sa\u00edda do comando anterior para o pr\u00f3ximo comando.</li> <li><code>grep 3.13.1</code>: Filtra a lista para exibir apenas as vers\u00f5es que cont\u00e9m <code>3.13.1</code>.</li> </ul> </li> </ol> <p>Vamos instalar a vers\u00e3o <code>3.13.1</code>: </p> <pre><code>pyenv install 3.13.1 # (1)!\n</code></pre> <ol> <li> Entendendo o comando:<ul> <li><code>pyenv</code>: Comando para gerenciar vers\u00f5es do Python.</li> <li><code>install</code>: Comando para instalar uma vers\u00e3o do Python.</li> <li><code>3.13.1</code>: Vers\u00e3o do Python que queremos instalar.</li> </ul> </li> </ol> <p>Esse processo pode demorar um pouco, ent\u00e3o aproveite para tomar um caf\u00e9 ou fazer um alongamento.</p> O que est\u00e1 acontecendo aqui? <p>O comando <code>pyenv install 3.13.1</code> est\u00e1 baixando e instalando a vers\u00e3o <code>3.13.1</code> do Python. O processo de instala\u00e7\u00e3o do Python \u00e9 algo um pouco complexo, pois ele precisa ser compilado e configurado para funcionar corretamente no seu ambiente. Por isso, \u00e9 normal que esse processo demore um pouco e pode apresentar alguns erros. Por isso \u00e9 importante prestar aten\u00e7\u00e3o nas mensagens que aparecem no terminal e buscar por solu\u00e7\u00f5es caso algo d\u00ea errado. O <code>pyenv</code> sempre gera um arquivo de log da instala\u00e7\u00e3o na pasta <code>/tmp</code> e especifica o nome do arquivo durante as mensagens de instala\u00e7\u00e3o, ent\u00e3o se algo der errado, voc\u00ea pode verificar esse arquivo para entender o que aconteceu.</p>"},{"location":"Aulas/Back%20End/aula_02/#verificando-a-instalacao","title":"Verificando a instala\u00e7\u00e3o","text":"<p>Para verificar se a instala\u00e7\u00e3o foi bem sucedida, podemos usar o comando:</p> <pre><code>pyenv versions # (1)!\n</code></pre> <ol> <li> Entendendo o comando:<ul> <li><code>pyenv</code>: Comando para gerenciar vers\u00f5es do Python.</li> <li><code>versions</code>: Comando para listar todas as vers\u00f5es do Python instaladas.</li> </ul> </li> </ol> <p>O resultado deve ser algo parecido com isso:</p> <pre><code>  system (set by /home/runner/.pyenv/version)\n* 3.13.1 (set by /home/runner/.python-version)\n</code></pre>"},{"location":"Aulas/Back%20End/aula_02/#montando-o-ambiente","title":"Montando o ambiente","text":"<p>A primeira coisa que vamos fazer \u00e9 informar para o <code>pyenv</code> que queremos usar a vers\u00e3o <code>3.13.1</code> do Python que acabamos de instalar. Para isso, vamos usar o comando:</p> <pre><code>pyenv global 3.13.1 # (1)!\n</code></pre> <ol> <li> Entendendo o comando:<ul> <li><code>pyenv</code>: Comando para gerenciar vers\u00f5es do Python.</li> <li><code>global</code>: Comando para definir a vers\u00e3o global do Python.</li> <li><code>3.13.1</code>: Vers\u00e3o do Python que queremos definir como global.</li> </ul> </li> </ol> <p>O resultado deve ser algo assim:</p> <pre><code>Python 3.13.1\n</code></pre> <p>O problema \u00e9 que sua sess\u00e3o do terminal ainda n\u00e3o sabe que voc\u00ea mudou a vers\u00e3o do Python. Para isso, voc\u00ea precisa reiniciar o terminal ou executar o comando:</p> <pre><code>source ~/.bashrc\n</code></pre> <p>Pronto agora voc\u00ea tem o Python 3.13.1 instalado e configurado no seu ambiente e podemos instalar mais algumas ferramentas globais que vamos usar no python.</p> <p>O que precisamos fazer agora \u00e9 atualiza o <code>pip</code>. Para isso vamos usar o comando:</p> <pre><code>pip install --upgrade pip # (1)!\n</code></pre> <ol> <li> Entendendo o comando:<ul> <li><code>pip</code>: Comando para gerenciar pacotes Python.</li> <li><code>install</code>: Comando para instalar um pacote Python.</li> <li><code>--upgrade</code>: flag para atualizar um pacote Python.</li> <li><code>pip</code>: Pacote Python que queremos atualizar.</li> </ul> </li> </ol> <p>Como resultado ir\u00e1 aparecer uma mensagem informando que o <code>pip</code> foi atualizado.</p>"},{"location":"Aulas/Back%20End/aula_02/#instalando-o-pipx","title":"Instalando o Pipx","text":"<p>O <code>pipx</code> \u00e9 uma ferramenta que permite instalar e gerenciar pacotes Python de forma global. Vamos instalar o <code>pipx</code>:</p> <pre><code>pip install pipx # (1)!\n</code></pre> <ol> <li> Entendendo o comando:<ul> <li><code>pip</code>: Comando para gerenciar pacotes Python.</li> <li><code>install</code>: Comando para instalar um pacote Python.</li> <li><code>pipx</code>: Pacote Python que queremos instalar.</li> </ul> </li> </ol> <p>Se o processo ocorrer sem erros, uma mensagem <code>Successfully installed ...</code> ser\u00e1 exibida.</p>"},{"location":"Aulas/Back%20End/aula_02/#instalando-o-poetry","title":"Instalando o Poetry","text":"<p>O <code>Poetry</code> \u00e9 uma ferramenta de gerenciamento de depend\u00eancias e empacotamento de aplica\u00e7\u00f5es Python. Vamos instalar o <code>Poetry</code>:</p> <pre><code>pipx install poetry # (1)!\n</code></pre> <ol> <li> Entendendo o comando:<ul> <li><code>pipx</code>: Comando para gerenciar pacotes Python de forma global.</li> <li><code>install</code>: Comando para instalar um pacote Python.</li> <li><code>poetry</code>: Pacote Python que queremos instalar.</li> </ul> </li> </ol> <p>Para facilitar um pouco o nosso trabalho, vamos instalar um plugin do <code>Poetry</code> que permite ativemos o uso de ambientes virtuais do <code>Poetry</code> mais facilmente. Para isso vamos usar o comando:</p> <pre><code>pipx inject poetry poetry-plugin-shell # (1)!\n</code></pre> <ol> <li> Entendendo o comando:<ul> <li><code>pipx</code>: Comando para gerenciar pacotes Python de forma global.</li> <li><code>inject</code>: Comando para injetar um pacote Python em outro pacote Python.</li> <li><code>poetry</code>: Pacote Python onde vamos injetar.</li> <li><code>poetry-plugin-shell</code>: Pacote Python que queremos injetar.</li> </ul> </li> </ol>"},{"location":"Aulas/Back%20End/aula_02/#criando-o-projeto","title":"Criando o projeto","text":"<p>Um projeto de software, de uma forma bem simplificada, nada mais \u00e9 que um conjuto de arquivos e pastas que juntos formam uma aplica\u00e7\u00e3o.</p> <p>Precisamos organizar esses arquivos e pastas de uma forma que seja f\u00e1cil de entender e de manter. Para isso vamos criar algumas pastas.</p> <p>Primeiro vamos perceber onde voc\u00ea est\u00e1 no seu terminal. Para isso vamos usar o comando:</p> <pre><code>pwd\n</code></pre> <p>Como resultado voc\u00ea deve receber uma sa\u00edda parecida com essa <code>/home/&lt;&lt;nome do seu usu\u00e1rio&gt;&gt;</code>. No linux essa \u00e9 uma pasta especial e tem um apelido, que \u00e9 o <code>~</code>. Ent\u00e3o se voc\u00ea estiver nessa pasta, voc\u00ea pode usar o comando:</p> <pre><code>cd ~\n</code></pre> <p>Isso vai te levar para a pasta do seu usu\u00e1rio. Agora vamos criar uma pasta para que voc\u00ea possa organizar seus projetos. Para isso vamos usar o comando:</p> <pre><code>mkdir projects\n</code></pre> <p>Agora vamos entrar nessa pasta:</p> <pre><code>cd projects\n</code></pre> <p>Agora vamos criar uma pasta para o nosso projeto:</p> <pre><code>mkdir tamo_junto\n</code></pre> <p>Por que <code>tamo_junto</code> e n\u00e3o <code>tamo-junto</code>?</p> <p>Vamos evitar de usar h\u00edfens (<code>-</code>) em nomes de pastas e arquivos. Isso porque o h\u00edfen \u00e9 um caractere especial e pode causar problemas em alguns sistemas operacionais e ambientes de desenvolvimento. Por isso, \u00e9 uma boa pr\u00e1tica evitar o uso de h\u00edfens em nomes de pastas e arquivos.</p> <p>Agora vamos entrar nessa pasta:</p> <pre><code>cd tamo_junto\n</code></pre> <p>Dentro dessa pasta vamos iniciar o nosso repositorio local do git. Para isso vamos usar o comando:</p> <pre><code>git init\n</code></pre> <p>Vamos criar mais uma pasta onde vamos colocar o c\u00f3digo da parte de back-end do nosso projeto:</p> <pre><code>mkdir backend\n</code></pre> <p>E vamos entrar nessa pasta:</p> <pre><code>cd backend\n</code></pre> <p>Agora que criamos esse estrutura de pastas, vamos </p>"}]}